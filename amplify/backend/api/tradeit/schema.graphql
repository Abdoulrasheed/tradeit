type UserProfile
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admins"], mutations: [create, update, delete] }
    ]
  ) {
  id: ID!
  listings: [Listing] @connection(name: "UserListing")
  cartItem: [CartItem] @connection
  picture: S3Object
}

type Picture
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admins"], mutations: [create, update, delete] }
    ]
  ) {
  id: ID!
  name: String
  owner: String
  file: S3Object
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type Listing @model {
  id: ID!
  name: String
  price: Float!
  owner: UserProfile! @connection(name: "UserListing")
  description: String
  likes: Float
  images: [Picture] @connection
}

type CartItem @model {
  id: ID!
  listingID: String!
  owner: UserProfile! @connection(name: "UserListing")
}

input CreateListingInput {
  id: ID!
  name: String
  price: Float!
  likes: Float
  description: String
}

input AddLikeInput {
  id: ID
  likes: Float!
}

type Mutation {
  batchAddlistings(listings: [CreateListingInput]): [Listing]
  addLike(input: AddLikeInput): Listing
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelUserProfileFilterInput {
  owner: ModelStringInput
}
