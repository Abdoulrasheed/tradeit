type UserProfile
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: groups, groups: ["admins"], mutations: [create, update, delete] }
    ]
  ) {
  id: ID!
  fullname: String
  listings: [Listing] @connection(name: "UserListing")
  cartItem: [CartItem] @connection(name: "UserProfileCartItems")
  picture: Image
  likedListings: [ListingLike]
}

type Listing @model @searchable {
  id: ID!
  title: String
  price: Float!
  owner: UserProfile! @connection(name: "UserListing")
  description: String
  likes: Int
  images: [Image]
  location: Location
  categoryId: String
  quantity: Int
  carts: [CartItem] @connection(name: "ListingCartItems")
}

type CartItem @model {
  id: ID!
  listing: Listing! @connection(name: "ListingCartItems")
  profile: UserProfile! @connection(name: "UserProfileCartItems")
}

type Image {
  url: String!
}

type ListingLike {
  listingID: String!
}

type Location {
  lat: Float!
  lon: Float!
}

type Mutation {
  addLike(input: AddLikeInput): Listing
}

type Query {
  nearbyListings(
    location: LocationInput!
    m: Int
    limit: Int
    nextToken: String
  ): ModelListingPointConnection
}

input LocationInput {
  lat: Float!
  lon: Float!
}

type ModelListingPointConnection {
  items: [Listing]
  total: Int
  nextToken: String
}

input AddLikeInput {
  id: ID
  likes: Int!
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelUserProfileFilterInput {
  owner: ModelStringInput
}
